// https://www.acmicpc.net/problem/14500 BOJ 14500 테트로미노 2024-01-01
#include <iostream>
#include <deque>
#include <cmath>

using namespace std;

int N, M;
int board[500][500];

int d[][4][2] = {
	{{0, 0}, {0, 1}, {0, 2}, {0, 3}}, // 1. 가로로 4칸인 경우
	{{0, 0}, {1, 0}, {2, 0}, {3, 0}}, // 2. 세로로 4칸인 경우

	{{0, 0}, {0, 1}, {0, 2}, {1, 2}}, // 3.1. 가로로 3칸인 경우 - ㄱ 모양
	{{0, 0}, {0, 1}, {0, 2}, {1, 1}}, // 3.2. ㅜ 모양
	{{0, 0}, {0, 1}, {0, 2}, {1, 0}}, // 3.3. ┌ 모양

	{{0, 0}, {1, 0}, {2, 0}, {0, 1}}, // 4.1. 세로로 3칸인 경우 - ┌ 모양
	{{0, 0}, {1, 0}, {2, 0}, {1, 1}}, // 4.2. 세로로 3칸인 경우 - ㅏ 모양
	{{0, 0}, {1, 0}, {2, 0}, {2, 1}}, // 4.3. 세로로 3칸인 경우 - ㄴ 모양

	{{0, 0}, {0, 1}, {1, 1}, {1, 0}}, // 5.1.1. 가로로 2칸인 경우 - ㄱ 자로 뻗고 왼쪽(ㅁ모양)
	{{0, 0}, {0, 1}, {1, 1}, {1, 2}}, // 5.1.1. ㄱ 자로 뻗고 오른쪽 (ㄱㄴ 모양)
	{{0, 0}, {0, 1}, {1, 1}, {2, 1}}, // 5.1.1. ㄱ자로 뻗고 아래 (ㄱ 모양 길게)

	{{0, 0}, {0, 1}, {1, 0}, {1, -1}}, // 5.2.1. 가로로 2칸인 경우 - ┌ 자로 뻗고 왼쪽
	{{0, 0}, {0, 1}, {1, 0}, {2, 0}}, // 5.2.2. 가로로 2칸인 경우 - ┌ 자로 뻗고 아래

	{{0, 0}, {1, 0}, {1, 1}, {1, 2}}, // 6.1.1. 세로로 2칸인 경우 - 오른쪽, 오른쪽
	{{0, 0}, {1, 0}, {1, 1}, {2, 1}}, // 6.1.2. 세로로 2칸인 경우 - 오른쪽, 아래
	{{0, 0}, {1, 0}, {1, -1}, {1, -2}}, // 6.2.1. 세로로 2칸인 경우 - 왼쪽, 왼쪽
	{{0, 0}, {1, 0}, {1, -1}, {2, -1}}, // 6.2.2. 세로로 2칸인 경우 - 왼쪽, 아래

	// 예외
	{{0, 0}, {1, 0}, {1, -1}, {1, 1}}, // 예외1. 세로로 2칸인 경우 - ㅗ 모양
	{{0, 0}, {0, 1}, {-1, 1}, {1, 1}}, // 예외2. 가로로 2칸인 경우 - ㅓ 모양
	{{0, 0}, {0, 1}, {-1, 1}, {-2, 1}}, // 예외2. 가로로 2칸인 경우 - 위 두 번
};

int main() {
	cin >> N >> M;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			cin >> board[i][j];

	int result = -1;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			for (int k = 0; k < 20; k++) {
				int temp_result = 0;
				bool is_err = false;
				for (int l = 0; l < 4; l++) {
					int ny = i + d[k][l][0], nx = j + d[k][l][1];
					if (ny < 0 || nx < 0 || ny > N - 1 || nx > M - 1) {
						is_err = true;
						break;
					}
					temp_result += board[ny][nx];
				}
				if (!is_err) {
					result = max(result, temp_result);
				}
			}
		}
	}

	cout << result;
}